// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	os "os"
	reflect "reflect"

	dynamic_segmentation "github.com/AlibekDalgat/dynamic_segmentation"
	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// AddToSegments mocks base method.
func (m *MockUser) AddToSegments(input dynamic_segmentation.UserUpdatesInfo) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToSegments", input)
	ret0, _ := ret[0].([]error)
	return ret0
}

// AddToSegments indicates an expected call of AddToSegments.
func (mr *MockUserMockRecorder) AddToSegments(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToSegments", reflect.TypeOf((*MockUser)(nil).AddToSegments), input)
}

// DeleteFromSegments mocks base method.
func (m *MockUser) DeleteFromSegments(input dynamic_segmentation.UserUpdatesInfo) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromSegments", input)
	ret0, _ := ret[0].([]error)
	return ret0
}

// DeleteFromSegments indicates an expected call of DeleteFromSegments.
func (mr *MockUserMockRecorder) DeleteFromSegments(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromSegments", reflect.TypeOf((*MockUser)(nil).DeleteFromSegments), input)
}

// GetActiveSegments mocks base method.
func (m *MockUser) GetActiveSegments(id int) ([]dynamic_segmentation.SegmentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSegments", id)
	ret0, _ := ret[0].([]dynamic_segmentation.SegmentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSegments indicates an expected call of GetActiveSegments.
func (mr *MockUserMockRecorder) GetActiveSegments(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSegments", reflect.TypeOf((*MockUser)(nil).GetActiveSegments), id)
}

// GetReport mocks base method.
func (m *MockUser) GetReport(input dynamic_segmentation.DateInfo) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", input)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport.
func (mr *MockUserMockRecorder) GetReport(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockUser)(nil).GetReport), input)
}

// MockSegment is a mock of Segment interface.
type MockSegment struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentMockRecorder
}

// MockSegmentMockRecorder is the mock recorder for MockSegment.
type MockSegmentMockRecorder struct {
	mock *MockSegment
}

// NewMockSegment creates a new mock instance.
func NewMockSegment(ctrl *gomock.Controller) *MockSegment {
	mock := &MockSegment{ctrl: ctrl}
	mock.recorder = &MockSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegment) EXPECT() *MockSegmentMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegment) CreateSegment(input dynamic_segmentation.SegmentInfo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentMockRecorder) CreateSegment(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegment)(nil).CreateSegment), input)
}

// CreateSegmentWihtPercent mocks base method.
func (m *MockSegment) CreateSegmentWihtPercent(percent int, input dynamic_segmentation.SegmentInfo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegmentWihtPercent", percent, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegmentWihtPercent indicates an expected call of CreateSegmentWihtPercent.
func (mr *MockSegmentMockRecorder) CreateSegmentWihtPercent(percent, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegmentWihtPercent", reflect.TypeOf((*MockSegment)(nil).CreateSegmentWihtPercent), percent, input)
}

// DeleteSegment mocks base method.
func (m *MockSegment) DeleteSegment(input dynamic_segmentation.SegmentInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentMockRecorder) DeleteSegment(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegment)(nil).DeleteSegment), input)
}

// MockBackground is a mock of Background interface.
type MockBackground struct {
	ctrl     *gomock.Controller
	recorder *MockBackgroundMockRecorder
}

// MockBackgroundMockRecorder is the mock recorder for MockBackground.
type MockBackgroundMockRecorder struct {
	mock *MockBackground
}

// NewMockBackground creates a new mock instance.
func NewMockBackground(ctrl *gomock.Controller) *MockBackground {
	mock := &MockBackground{ctrl: ctrl}
	mock.recorder = &MockBackgroundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackground) EXPECT() *MockBackgroundMockRecorder {
	return m.recorder
}

// DeleteExpirated mocks base method.
func (m *MockBackground) DeleteExpirated() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpirated")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpirated indicates an expected call of DeleteExpirated.
func (mr *MockBackgroundMockRecorder) DeleteExpirated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpirated", reflect.TypeOf((*MockBackground)(nil).DeleteExpirated))
}
